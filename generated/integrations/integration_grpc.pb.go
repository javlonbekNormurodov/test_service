// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.17.3
// source: integrations/integration.proto

package integration_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Integration_CreateIntegration_FullMethodName   = "/integrations.Integration/CreateIntegration"
	Integration_GetIntegrationsList_FullMethodName = "/integrations.Integration/GetIntegrationsList"
	Integration_GetIntegrationById_FullMethodName  = "/integrations.Integration/GetIntegrationById"
	Integration_UpdateIntegration_FullMethodName   = "/integrations.Integration/UpdateIntegration"
	Integration_Delete_FullMethodName              = "/integrations.Integration/Delete"
)

// IntegrationClient is the client API for Integration service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IntegrationClient interface {
	CreateIntegration(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*FullResponse, error)
	GetIntegrationsList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetListResponse, error)
	GetIntegrationById(ctx context.Context, in *GetByIDRequest, opts ...grpc.CallOption) (*FullResponse, error)
	UpdateIntegration(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*FullResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
}

type integrationClient struct {
	cc grpc.ClientConnInterface
}

func NewIntegrationClient(cc grpc.ClientConnInterface) IntegrationClient {
	return &integrationClient{cc}
}

func (c *integrationClient) CreateIntegration(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*FullResponse, error) {
	out := new(FullResponse)
	err := c.cc.Invoke(ctx, Integration_CreateIntegration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationClient) GetIntegrationsList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetListResponse, error) {
	out := new(GetListResponse)
	err := c.cc.Invoke(ctx, Integration_GetIntegrationsList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationClient) GetIntegrationById(ctx context.Context, in *GetByIDRequest, opts ...grpc.CallOption) (*FullResponse, error) {
	out := new(FullResponse)
	err := c.cc.Invoke(ctx, Integration_GetIntegrationById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationClient) UpdateIntegration(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*FullResponse, error) {
	out := new(FullResponse)
	err := c.cc.Invoke(ctx, Integration_UpdateIntegration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, Integration_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IntegrationServer is the server API for Integration service.
// All implementations must embed UnimplementedIntegrationServer
// for forward compatibility
type IntegrationServer interface {
	CreateIntegration(context.Context, *CreateRequest) (*FullResponse, error)
	GetIntegrationsList(context.Context, *GetListRequest) (*GetListResponse, error)
	GetIntegrationById(context.Context, *GetByIDRequest) (*FullResponse, error)
	UpdateIntegration(context.Context, *UpdateRequest) (*FullResponse, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	mustEmbedUnimplementedIntegrationServer()
}

// UnimplementedIntegrationServer must be embedded to have forward compatible implementations.
type UnimplementedIntegrationServer struct {
}

func (UnimplementedIntegrationServer) CreateIntegration(context.Context, *CreateRequest) (*FullResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIntegration not implemented")
}
func (UnimplementedIntegrationServer) GetIntegrationsList(context.Context, *GetListRequest) (*GetListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIntegrationsList not implemented")
}
func (UnimplementedIntegrationServer) GetIntegrationById(context.Context, *GetByIDRequest) (*FullResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIntegrationById not implemented")
}
func (UnimplementedIntegrationServer) UpdateIntegration(context.Context, *UpdateRequest) (*FullResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIntegration not implemented")
}
func (UnimplementedIntegrationServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedIntegrationServer) mustEmbedUnimplementedIntegrationServer() {}

// UnsafeIntegrationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IntegrationServer will
// result in compilation errors.
type UnsafeIntegrationServer interface {
	mustEmbedUnimplementedIntegrationServer()
}

func RegisterIntegrationServer(s grpc.ServiceRegistrar, srv IntegrationServer) {
	s.RegisterService(&Integration_ServiceDesc, srv)
}

func _Integration_CreateIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationServer).CreateIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Integration_CreateIntegration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationServer).CreateIntegration(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Integration_GetIntegrationsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationServer).GetIntegrationsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Integration_GetIntegrationsList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationServer).GetIntegrationsList(ctx, req.(*GetListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Integration_GetIntegrationById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationServer).GetIntegrationById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Integration_GetIntegrationById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationServer).GetIntegrationById(ctx, req.(*GetByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Integration_UpdateIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationServer).UpdateIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Integration_UpdateIntegration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationServer).UpdateIntegration(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Integration_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Integration_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Integration_ServiceDesc is the grpc.ServiceDesc for Integration service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Integration_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "integrations.Integration",
	HandlerType: (*IntegrationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateIntegration",
			Handler:    _Integration_CreateIntegration_Handler,
		},
		{
			MethodName: "GetIntegrationsList",
			Handler:    _Integration_GetIntegrationsList_Handler,
		},
		{
			MethodName: "GetIntegrationById",
			Handler:    _Integration_GetIntegrationById_Handler,
		},
		{
			MethodName: "UpdateIntegration",
			Handler:    _Integration_UpdateIntegration_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Integration_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "integrations/integration.proto",
}
